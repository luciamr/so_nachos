Plancha 1 - Introducción a Nachos

**************************************************
Para ejecutar NACHOS:
> cd code/threads
> rm *.o
> make depend
> make
> ./nachos
Para ejecutar NACHOS con banderas de debug:
> ./nachos -d banderasElegidas
**************************************************

1. Cuánta memoria tiene la máquina simulada por Nachos?

MemorySize = NumPhysPages * PageSize
NumPhysPages = 32
PageSize = SectorSize
SectorSize = 128 bytes
Por lo tanto, la memoria de la máquina simulada para Nachos es de 4096 bytes, es decir, 4 kB.
Fuente: machine/machine.h y machine/disk.h

2. Cómo cambiaría ese valor?

Modificando el tamaño de SectorSize.

3. De qué tamaño es un disco?

La clase Disk define un disco físico. El disco tiene una única superficie, dividida en "tracks", y cada "track" está dividido en "sectors". Todos los "tracks" tienen la misma cantidad de "sectors" y todos los "sectors" tienen el mismo número de bytes de almacenamiento.
SectorSize = 128 bytes
SectorsPerTrack = 32
NumTracks = 32
NumSectors = SectorsPerTrack * NumTracks (total)
Luego, un disco tiene un tamaño de 131.072 bytes, es decir, 128 kB.
Fuente: machine/disk.h

4. Cuántas instrucciones del MIPS simula Nachos?

Simula 58 instrucciones.
	{"ADD r%d,r%d,r%d", {RD, RS, RT}},
	{"ADDI r%d,r%d,%d", {RT, RS, EXTRA}},
	{"ADDIU r%d,r%d,%d", {RT, RS, EXTRA}},
	{"ADDU r%d,r%d,r%d", {RD, RS, RT}},
	{"AND r%d,r%d,r%d", {RD, RS, RT}},
	{"ANDI r%d,r%d,%d", {RT, RS, EXTRA}},
	{"BEQ r%d,r%d,%d", {RS, RT, EXTRA}},
	{"BGEZ r%d,%d", {RS, EXTRA, NONE}},
	{"BGEZAL r%d,%d", {RS, EXTRA, NONE}},
	{"BGTZ r%d,%d", {RS, EXTRA, NONE}},
	{"BLEZ r%d,%d", {RS, EXTRA, NONE}},
	{"BLTZ r%d,%d", {RS, EXTRA, NONE}},
	{"BLTZAL r%d,%d", {RS, EXTRA, NONE}},
	{"BNE r%d,r%d,%d", {RS, RT, EXTRA}},
	{"DIV r%d,r%d", {RS, RT, NONE}},
	{"DIVU r%d,r%d", {RS, RT, NONE}},
	{"J %d", {EXTRA, NONE, NONE}},
	{"JAL %d", {EXTRA, NONE, NONE}},
	{"JALR r%d,r%d", {RD, RS, NONE}},
	{"JR r%d,r%d", {RD, RS, NONE}},
	{"LB r%d,%d(r%d)", {RT, EXTRA, RS}},
	{"LBU r%d,%d(r%d)", {RT, EXTRA, RS}},
	{"LH r%d,%d(r%d)", {RT, EXTRA, RS}},
	{"LHU r%d,%d(r%d)", {RT, EXTRA, RS}},
	{"LUI r%d,%d", {RT, EXTRA, NONE}},
	{"LW r%d,%d(r%d)", {RT, EXTRA, RS}},
	{"LWL r%d,%d(r%d)", {RT, EXTRA, RS}},
	{"LWR r%d,%d(r%d)", {RT, EXTRA, RS}},
	{"MFHI r%d", {RD, NONE, NONE}},
	{"MFLO r%d", {RD, NONE, NONE}},
	{"MTHI r%d", {RS, NONE, NONE}},
	{"MTLO r%d", {RS, NONE, NONE}},
	{"MULT r%d,r%d", {RS, RT, NONE}},
	{"MULTU r%d,r%d", {RS, RT, NONE}},
	{"NOR r%d,r%d,r%d", {RD, RS, RT}},
	{"OR r%d,r%d,r%d", {RD, RS, RT}},
	{"ORI r%d,r%d,%d", {RT, RS, EXTRA}},
	{"RFE", {NONE, NONE, NONE}},
	{"SB r%d,%d(r%d)", {RT, EXTRA, RS}},
	{"SH r%d,%d(r%d)", {RT, EXTRA, RS}},
	{"SLL r%d,r%d,%d", {RD, RT, EXTRA}},
	{"SLLV r%d,r%d,r%d", {RD, RT, RS}},
	{"SLT r%d,r%d,r%d", {RD, RS, RT}},
	{"SLTI r%d,r%d,%d", {RT, RS, EXTRA}},
	{"SLTIU r%d,r%d,%d", {RT, RS, EXTRA}},
	{"SLTU r%d,r%d,r%d", {RD, RS, RT}},
	{"SRA r%d,r%d,%d", {RD, RT, EXTRA}},
	{"SRAV r%d,r%d,r%d", {RD, RT, RS}},
	{"SRL r%d,r%d,%d", {RD, RT, EXTRA}},
	{"SRLV r%d,r%d,r%d", {RD, RT, RS}},
	{"SUB r%d,r%d,r%d", {RD, RS, RT}},
	{"SUBU r%d,r%d,r%d", {RD, RS, RT}},
	{"SW r%d,%d(r%d)", {RT, EXTRA, RS}},
	{"SWL r%d,%d(r%d)", {RT, EXTRA, RS}},
	{"SWR r%d,%d(r%d)", {RT, EXTRA, RS}},
	{"XOR r%d,r%d,r%d", {RD, RS, RT}},
	{"XORI r%d,r%d,%d", {RT, RS, EXTRA}},
	{"SYSCALL", {NONE, NONE, NONE}}
Fuente: machine/mipssim.h
	
5. Explicar el código que procesa la instrucción "add".

#define SIGN_BIT	0x80000000
int sum; //define la variable int sum
sum = registers[(int)instr->rs] + registers[(int)instr->rt]; //almacena en sum la suma de los int que se encuentran en rs y rt
if (!((registers[(int)instr->rs] ^ registers[(int)instr->rt]) & SIGN_BIT) && //verifica 
    ((registers[(int)instr->rs] ^ sum) & SIGN_BIT)) {
    RaiseException(OverflowException, 0);
    return;
}
registers[(int)instr->rd] = sum;
Fuente: machine/mipssim.cc

6. Nombrar los archivos fuente en los que figuran las funciones y métodos llamados por el main de NACHOS al ejecutarlo en el directorio threads.

void ThreadTest(); threads/threadtest.cc
void Copy(const char *unixFile, const char *nachosFile); filesys/fstest.cc
void Print(const char *file); filesys/fstest.cc
void PerformanceTest(void); filesys/fstest.cc
void StartProcess(const char *file); userprog/progtest.cc
void ConsoleTest(const char *in, const char *out); userprog/progtest.cc
void MailTest(int networkID); network/nettest.cc

7.

8. Comentar el efecto de las distintas banderas de debug.

'+' -- turn on all debug messages
't' -- thread system
's' -- semaphores, locks, and conditions
'i' -- interrupt emulation
'm' -- machine emulation (USER_PROGRAM)
'd' -- disk emulation (FILESYS)
'f' -- file system (FILESYS)
'a' -- address spaces (USER_PROGRAM)
'n' -- network emulation (NETWORK)

9. Qué efecto hacen las macros ASSERT y DEBUG definidas en "utility.h"? 

ASSERT(condition): si condition es true, no hace nada; si es false, imprime un mensaje y corta la ejecución.
DEBUG(char flag, const char *format, ...): si la flag está habilitada, formatea e imprime la lista de argumentos que recibió; si no, no hace nada.

10. Dónde están definidas las constantes USER_PROGRAM, FILESYS_NEEDED, FILESYS_STUB y NETWORK?

USER_PROGRAM: userprog/Makefile, filesys/Makefile, vm/Makefile, network/Makefile
FILESYS_NEEDED: userprog/Makefile, filesys/Makefile, vm/Makefile, network/Makefile
FILESYS_STUB: userprog/Makefile, vm/Makefile
NETWORK: network/Makefile

11. Cuál es la diferencia entre las clases "list" y "synchlist"?

La clase synchlist contiene una instancia de list y regula su acceso.
La estructura de datos de la list solamente va a poder ser accedida de a un thread.
Cuando se agrega un elemento a la lista, se despierta a todos los que están esperando que se incorpore un item.
Los threads que intenten eliminar items de la list van a tener que esperar hasta que la list tenga al menos uno.

12. En qué archivos está definida la función "main"? En qué archivo está definida la función "main" del ejecutable "nachos" del directorio "userprog"?

grep -ri "main(" .
./test/sort.c:main() -> para testing
./test/matmult.c:main() -> para testing
./test/halt.c:main() -> para testing
./test/shell.c:main() -> para testing
./test/filetest.c:main() -> para testing
./bin/disasm.c:main(argc, argv)
./bin/out.c:main(argc,argv)
./bin/main.c:main(argc, argv)
./threads/main.cc:main(int argc, char **argv)

"main" -> bin: disasm.c, out.c, main.c; threads: main.cc
La función "main" del ejecutable "nachos" del directorio "userprog" está definida en threads/main.cc.

13. Qué línea de comandos soporta NACHOS? Qué efecto tiene la opción -rs?

// Usage: nachos -d <debugflags> -rs <random seed #>
//		-s -x <nachos file> -c <consoleIn> <consoleOut>
//		-f -cp <unix file> <nachos file>
//		-p <nachos file> -r <nachos file> -l -D -t
//              -n <network reliability> -m <machine id>
//              -o <other machine id>
//              -z
//
//    -d causes certain debugging messages to be printed (cf. utility.h)
//    -rs causes Yield to occur at random (but repeatable) spots
//    -z prints the copyright message
//
//  USER_PROGRAM
//    -s causes user programs to be executed in single-step mode
//    -x runs a user program
//    -c tests the console
//
//  FILESYS
//    -f causes the physical disk to be formatted
//    -cp copies a file from UNIX to Nachos
//    -p prints a Nachos file to stdout
//    -r removes a Nachos file from the file system
//    -l lists the contents of the Nachos directory
//    -D prints the contents of the entire file system 
//    -t tests the performance of the Nachos file system
//
//  NETWORK
//    -n sets the network reliability
//    -m sets this machine's host id (needed for the network)
//    -o runs a simple test of the Nachos network software
//
//  NOTE -- flags are ignored until the relevant assignment.

-rs -> random seed (threads/system.cc)
RandomInit(atoi(*(argv + 1)));	// initialize pseudo-random
                // number generator
randomYield = true;

14. Modificar el ejemplo del directorio threads para que se generen 5 threads en lugar de 2.

Ver threads/threadtest.cc.

15. Modificar el ejemplo para que estos 5 hilos utilicen un semáforo inicializado en 3.
Ésto sólo debe ocurrir si se define la macro de compilación SEMAPHORE_TEST.

Ver threads/threadtest.cc.
Para ejecutar NACHOS con SEMAPHORE_TEST agregar -DSEMAPHORE_TEST a DEFINES en code/threads/Makefile.

16. Agregar al ejemplo anterior una línea de debug donde diga cuando cada hilo hace un P() y cuando un V().
La salida debe verse por pantalla solamente si se activa esa bandera de debug.

Ver threads/threadtest.cc.
